cmake_minimum_required(VERSION 3.14)

project(client VERSION 0.1 LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(Qt6 REQUIRED COMPONENTS Core Quick)
find_package(Qt6 REQUIRED COMPONENTS Core Quick)
find_package(Qt6 REQUIRED COMPONENTS QuickWidgets)


set(PROJECT_SOURCES
        Colors.h
        Colors.cpp
        main.cpp
        ${PROJECT_SOURCE_DIR}../../server/FManager/MainPocket.cpp
        appwindow.cpp
        appwindow.h
        qml.qrc
)

#if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
 #   qt_add_executable(client
  #      MANUAL_FINALIZATION
   #     ${PROJECT_SOURCES}
    #)
# Define target properties for Android with Qt 6 as:
#    set_property(TARGET client APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation
#else()
    if(ANDROID)
        add_library(client SHARED
            ${PROJECT_SOURCES}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(client
          ${PROJECT_SOURCES}
        )
    endif()
#endif()


# fclient install

include_directories("libs/FServer2.0/FServer2_0/source/Client")
include_directories("libs/FServer2.0/FServer2_0/source/Server")
include_directories("libs/FServer2.0/FServer2_0/libs/asio-1.24.0/include")

add_subdirectory(libs/FServer2.0/FServer2_0)

target_compile_features(client PRIVATE cxx_std_17)

target_link_libraries(client PRIVATE libFC)

set(CMAKE_CXX_FLAGS "-pthread")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/build/bin)

########

target_compile_definitions(client
  PRIVATE $<$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>:QT_QML_DEBUG>)
target_link_libraries(client
  PRIVATE Qt${QT_VERSION_MAJOR}::Core Qt${QT_VERSION_MAJOR}::Quick)
target_link_libraries(client
  PRIVATE Qt6::QuickWidgets)


set_target_properties(client PROPERTIES
    MACOSX_BUNDLE_GUI_IDENTIFIER my.example.com
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_import_qml_plugins(client)
    qt_finalize_executable(client)
endif()
